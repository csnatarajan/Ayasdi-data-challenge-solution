cmake_minimum_required(VERSION 2.8)

SET_PROPERTY (GLOBAL PROPERTY TARGET_SUPPORTS_SHARED_LIBS TRUE)

SET(TRILINOS_PATH /hpcdata/natac0/trilinos/stable)
FIND_PACKAGE(Trilinos PATHS ${TRILINOS_PATH}/lib/cmake/Trilinos ${TRILINOS_PATH})
IF(Trilinos_FOUND)
   MESSAGE("   CXX_COMPILER = ${Trilinos_CXX_COMPILER}")
   MESSAGE("   C_COMPILER = ${Trilinos_C_COMPILER}")
   MESSAGE("   Fortran_COMPILER = ${Trilinos_Fortran_COMPILER}")
   MESSAGE("   CXX_COMPILER_FLAGS = ${Trilinos_CXX_COMPILER_FLAGS}")
   MESSAGE("   C_COMPILER_FLAGS = ${Trilinos_C_COMPILER_FLAGS}")
   MESSAGE("   Fortran_COMPILER_FLAGS = ${Trilinos_Fortran_COMPILER_FLAGS}")
   MESSAGE("   LINKER = ${Trilinos_LINKER}")
ELSE()
  MESSAGE(FATAL_ERROR "Could not find valid compilers!")
ENDIF()

IF(NOT CMAKE_CXX_COMPILER)
  MESSAGE("Setting CXX compiler.")
  SET(CMAKE_CXX_COMPILER ${Trilinos_CXX_COMPILER})
ENDIF()

IF(NOT CMAKE_C_COMPILER)
  MESSAGE("Setting C compiler.")
  SET(CMAKE_C_COMPILER ${Trilinos_C_COMPILER})
ENDIF()

#IF(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE RELEASE)
#ENDIF(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)

# Select flags.
SET(CMAKE_CXX_FLAGS "-Wall -DMPICH_IGNORE_CXX_SEEK")
SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g -mkl")
SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -DMPICH_IGNORE_CXX_SEEK -mkl")
SET(CMAKE_CXX_FLAGS_DEBUG  "-O0 -g -mkl")

project("PCA")

add_subdirectory(src)
